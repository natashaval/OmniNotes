/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;
import Controllers.AttachmentController;
import java.awt.Dialog;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import Controllers.NoteController;
import Controllers.NoteEditor;
import static javax.swing.JOptionPane.showMessageDialog;
import Controllers.CategoryController;
import Controllers.ReminderController;
import Models.Attachment;
import Models.Category;
import Models.Location;
import Models.Note;
import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import org.json.JSONException;

/**
 *
 * @author adis
 */
public class NoteFormEditorUI extends javax.swing.JFrame {
    private JComboBox comboBox;
    private String location = "";
    private Category c = null;
    
    //private Attachment attachment = null;
    private NoteEditor ne = null;
    private CategoryController cc = null;
    
    //to know wheter to update or create new note
    private String mode = null;
    
    private int inTrash = -1;
    private int isArchived = -1;
    
    private String filePath = "", fileName = "", fileType = "";
    
    private String dateTime = "";
    private String repeat = "0";
    
    
    public void setCat(Category c) {
        this.c = c;
        this.categoryField.setText("Category: " + c.getName());
    }
    
    public void setAttachment(String path, String name, String type) {
        filePath = path; fileName = name; fileType = type;
        this.attachmentField.setText("Attachment: " + path);
    }

    /**
     * Creates new form NoteFormEditorUI
     */
    public NoteFormEditorUI() {
        ne = new NoteEditor();        
        initComponents();        
        this.trashBtn.setEnabled(false);     
        this.archiveBtn.setEnabled(false);
        this.unArchiveBtn.setEnabled(false);
        this.deleteBtn.setEnabled(false);
//        this.categoryBtn.setEnabled(false);
//        this.locationBtn.setEnabled(false);
//        this.reminderBtn.setEnabled(false);
//        this.attachmentBtn.setEnabled(false);   
        this.restoreBtn.setEnabled(false);
        comboBox = new JComboBox();        
        comboBox = this.locationSelect;

    }
    // flag to determine whether a note is selected or not. default -1, not selected    
    private int noteId = -1;

    public int getNoteId() {
        return noteId;
    }

    public void setNoteId(int noteId) {
        this.noteId = noteId;
        
//        check if there is a selected note, enable buttons
        if (noteId != -1) {
            this.trashBtn.setEnabled(true);
            this.archiveBtn.setEnabled(true);            
            this.categoryBtn.setEnabled(true);
            this.locationBtn.setEnabled(true);
            this.reminderBtn.setEnabled(true);
            this.attachmentBtn.setEnabled(true);
            
        }
        
    }
       

    public int getIsArchived() {
        return isArchived;
    }

    public void setIsArchived(int isArchived) {
        this.isArchived = isArchived;
        if (isArchived == 1) {
            this.unArchiveBtn.setEnabled(true);
            this.archiveBtn.setEnabled(false);
        }
    }

    public int getInTrash() {
        return inTrash;
    }

//    make sure when calling this function, call it after setNoteId
    public void setInTrash(int inTrash) {
        this.inTrash =  inTrash;
        if (inTrash == 1) {
            this.deleteBtn.setEnabled(true);
            this.trashBtn.setEnabled(false);
            this.restoreBtn.setEnabled(true);
        }
    }
    

    public String getMode() {
        return mode;
    }

    public void setMode(String mode) {
        this.mode = mode;
    }
    
    public void setLocation(String location) {
        this.location = location;
        locationField.setText("Location: " + location);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        locationDialog = new javax.swing.JDialog();
        locationInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        searchLocationBtn = new javax.swing.JButton();
        locationSelect = new javax.swing.JComboBox<>();
        confirmBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        contentInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        titleInput = new javax.swing.JTextPane();
        titleLabel = new javax.swing.JLabel();
        contentLabel = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        categoryBtn = new javax.swing.JButton();
        attachmentBtn = new javax.swing.JButton();
        reminderBtn = new javax.swing.JButton();
        archiveStatus = new javax.swing.JTextField();
        archiveBtn = new javax.swing.JButton();
        unArchiveBtn = new javax.swing.JButton();
        trashBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        locationBtn = new javax.swing.JButton();
        locationField = new javax.swing.JTextField();
        categoryField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tagInput = new javax.swing.JTextPane();
        titleLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        restoreBtn = new javax.swing.JButton();
        categoryColour = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        photoPanel = new javax.swing.JLabel();
        attachmentField = new javax.swing.JTextField();
        reminderField = new javax.swing.JTextField();

        locationDialog.setLocation(new java.awt.Point(300, 400));
        locationDialog.setSize(new java.awt.Dimension(600, 400));

        locationInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationInputActionPerformed(evt);
            }
        });
        locationInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                locationInputKeyReleased(evt);
            }
        });

        jLabel1.setText("Search Location");

        searchLocationBtn.setText("Search");
        searchLocationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchLocationBtnActionPerformed(evt);
            }
        });

        locationSelect.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        confirmBtn.setText("Confirm");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout locationDialogLayout = new javax.swing.GroupLayout(locationDialog.getContentPane());
        locationDialog.getContentPane().setLayout(locationDialogLayout);
        locationDialogLayout.setHorizontalGroup(
            locationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationDialogLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(locationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, locationDialogLayout.createSequentialGroup()
                        .addComponent(confirmBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationSelect, javax.swing.GroupLayout.Alignment.LEADING, 0, 432, Short.MAX_VALUE)
                    .addComponent(locationInput, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        locationDialogLayout.setVerticalGroup(
            locationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locationInput, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(locationSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(locationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(233, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        contentInput.setColumns(20);
        contentInput.setRows(5);
        jScrollPane1.setViewportView(contentInput);

        jScrollPane2.setViewportView(titleInput);

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        titleLabel.setText("Title");

        contentLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        contentLabel.setText("Content");

        backBtn.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        categoryBtn.setText("Category");
        categoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryBtnActionPerformed(evt);
            }
        });

        attachmentBtn.setText("Attachment");
        attachmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachmentBtnActionPerformed(evt);
            }
        });

        reminderBtn.setText("Reminder");
        reminderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reminderBtnActionPerformed(evt);
            }
        });

        archiveStatus.setText("Not Archived");
        archiveStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        archiveStatus.setEnabled(false);

        archiveBtn.setText("Archive");
        archiveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archiveBtnActionPerformed(evt);
            }
        });

        unArchiveBtn.setText("Un-archive");
        unArchiveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unArchiveBtnActionPerformed(evt);
            }
        });

        trashBtn.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        trashBtn.setText("Put to Trash");
        trashBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trashBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        locationBtn.setText("Location");
        locationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationBtnActionPerformed(evt);
            }
        });

        locationField.setEditable(false);
        locationField.setBackground(new java.awt.Color(255, 255, 255));
        locationField.setText("Location");
        locationField.setEnabled(false);
        locationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationFieldActionPerformed(evt);
            }
        });

        categoryField.setEditable(false);
        categoryField.setBackground(new java.awt.Color(255, 255, 255));
        categoryField.setText("Category");
        categoryField.setEnabled(false);

        jScrollPane3.setViewportView(tagInput);

        titleLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        titleLabel1.setText("Tag");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        restoreBtn.setText("Restore");
        restoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreBtnActionPerformed(evt);
            }
        });

        categoryColour.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout categoryColourLayout = new javax.swing.GroupLayout(categoryColour);
        categoryColour.setLayout(categoryColourLayout);
        categoryColourLayout.setHorizontalGroup(
            categoryColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 185, Short.MAX_VALUE)
        );
        categoryColourLayout.setVerticalGroup(
            categoryColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton1.setText("ceck at");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        attachmentField.setEditable(false);
        attachmentField.setBackground(new java.awt.Color(255, 255, 255));
        attachmentField.setText("Attachment");
        attachmentField.setEnabled(false);

        reminderField.setText("Reminder");
        reminderField.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reminderField, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(categoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane3)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(archiveStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(attachmentField))
                        .addComponent(locationField, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jSeparator1)
                        .addComponent(contentLabel)
                        .addComponent(titleLabel)
                        .addComponent(titleLabel1)
                        .addComponent(restoreBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(archiveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(attachmentBtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(unArchiveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(trashBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(categoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(reminderBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(locationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(photoPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(categoryColour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(92, 92, 92))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(135, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(titleLabel)
                                        .addGap(9, 9, 9)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(8, 8, 8)
                                        .addComponent(contentLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(categoryColour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(titleLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(locationField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(archiveStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                            .addComponent(attachmentField))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(reminderField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(categoryField))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(photoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(37, 37, 37))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(archiveBtn)
                                    .addComponent(attachmentBtn)
                                    .addComponent(categoryBtn)
                                    .addComponent(reminderBtn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(unArchiveBtn)
                                    .addComponent(trashBtn)
                                    .addComponent(deleteBtn)
                                    .addComponent(locationBtn))
                                .addGap(11, 11, 11)
                                .addComponent(restoreBtn)
                                .addContainerGap(122, Short.MAX_VALUE))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
//        check if content is empty, don't save
        if ("".equals(this.contentInput.getText().trim())) {
            NoteController nc = new NoteController();
            nc.openMainMenu();
            
            JOptionPane.showMessageDialog(this,
            "Note wasn't saved because content was empty.",
            "Inane warning",
            JOptionPane.WARNING_MESSAGE);
            this.dispose();

        } else { //content not empty, save         
        ne.instantiateNote(titleInput.getText(), contentInput.getText(), this.mode, this.noteId, this.location, this.c, this.tagInput.getText(),
                this.fileName, this.filePath, this.fileType, this.dateTime, this.repeat);   //save current typed note       
        NoteController nc = new NoteController();
        nc.openMainMenu();      //open mainmenu, show active notes
        this.dispose();         //destroy this object   
        }               
        
    }//GEN-LAST:event_backBtnActionPerformed

    private void attachmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachmentBtnActionPerformed
//        final JFileChooser fc = new JFileChooser();        
//        fc.showOpenDialog(this);
//        int ret = 0; String fileName = "", filePath = "";
//        if (ret == JFileChooser.APPROVE_OPTION) {
//            File file = fc.getSelectedFile();
//            fileName = file.getName();
//            filePath = file.getAbsolutePath();
//            System.out.println(fileName);
//            System.out.println(filePath);
//            System.out.println("Clicked on attachment!");
//            
//            this.saveAttachment(file);
//        }                       
    
        AttachmentController ac = new AttachmentController(this);
        ac.openAttachmentUI();

    }//GEN-LAST:event_attachmentBtnActionPerformed
//    todo: hold current filename and path, then when click back btn, saev attachment
    public void saveAttachment(File file) {
        this.fileName = file.getName();
        this.filePath = file.getAbsolutePath();
//        file.get
        System.out.println(this.filePath);
//        NoteEditor ne = new NoteEditor();
        
    }
    
    
    
    private void categoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryBtnActionPerformed
        CategoryController cc = new CategoryController(this);
        cc.openCategoryUI(this.noteId);
        
    }//GEN-LAST:event_categoryBtnActionPerformed

    private void reminderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reminderBtnActionPerformed
        ReminderController rc = new ReminderController(this);
        rc.openReminderUI();
    }//GEN-LAST:event_reminderBtnActionPerformed

    private void archiveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archiveBtnActionPerformed
    
        System.out.println(this.noteId);
//        NoteEditor ne = new NoteEditor();       //instantiate noteeditor (controller)

        NoteController nc = new NoteController();
        ne.archiveNote(this.noteId);            //call function to archive
        nc.openMainMenu();                      //back to mainmenu                
        this.dispose();                         //destroy noteformeditor
    }//GEN-LAST:event_archiveBtnActionPerformed

    private void unArchiveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unArchiveBtnActionPerformed
//        NoteEditor ne = new NoteEditor();
        Note note = new Note();
        note.setTitle(this.titleInput.getText());
        note.setNoteId(this.noteId);
        ne.unArchiveNote(note);
        this.dispose();
    }//GEN-LAST:event_unArchiveBtnActionPerformed

    private void trashBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trashBtnActionPerformed
//        NoteEditor ne = new NoteEditor();        
        
        try {
            ne.removeNote(noteId);
        } catch (Exception ex) {
            Logger.getLogger(NoteFormEditorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        NoteController nc =  new NoteController();
        nc.openMainMenu();
        this.dispose();
    }//GEN-LAST:event_trashBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
//        NoteEditor ne = new NoteEditor();
        try {
            ne.deleteNote(noteId);
        } catch (Exception ex) {
            Logger.getLogger(NoteFormEditorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        NoteController nc = new NoteController();
        nc.openTrashUI();
        this.dispose();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void locationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationBtnActionPerformed
        this.locationDialog.setVisible(true);
    }//GEN-LAST:event_locationBtnActionPerformed

    private void searchLocationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchLocationBtnActionPerformed
//        NoteEditor ne = new NoteEditor();
        LinkedList<Location> locations = null;
        try {
            locations = ne.searchLocation(this.locationInput.getText());
        } catch (IOException ex) {
            Logger.getLogger(NoteFormEditorUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(NoteFormEditorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        DefaultComboBoxModel model = (DefaultComboBoxModel) comboBox.getModel();
        model.removeAllElements();
        
        Iterator<Location> it = locations.iterator();
        
        while (it.hasNext()) {
            Location l = it.next();
            comboBox.addItem(l);              
        }
    }//GEN-LAST:event_searchLocationBtnActionPerformed

    private void locationInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_locationInputKeyReleased
//        NoteEditor ne = new NoteEditor();
//        LinkedList<Location> locations = null;
//        try {
//            locations = ne.searchLocation(this.locationInput.getText());
//        } catch (IOException ex) {
//            Logger.getLogger(NoteFormEditorUI.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (JSONException ex) {
//            Logger.getLogger(NoteFormEditorUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        DefaultComboBoxModel model = (DefaultComboBoxModel) comboBox.getModel();
//        model.removeAllElements();
//        
//        Iterator<Location> it = locations.iterator();
//        
//        while (it.hasNext()) {
//            Location l = it.next();
//            comboBox.addItem(l);              
//        }
    }//GEN-LAST:event_locationInputKeyReleased

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        this.location = this.locationSelect.getSelectedItem().toString();
        this.locationField.setText(location);
        this.locationDialog.dispose();
    }//GEN-LAST:event_confirmBtnActionPerformed

    private void locationFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationFieldActionPerformed

    private void restoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreBtnActionPerformed
//        NoteEditor ne = new NoteEditor();
        try {
            ne.restoreNote(this.noteId);
        } catch (Exception ex) {
            Logger.getLogger(NoteFormEditorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        NoteController nc = new NoteController();
        nc.openTrashUI();
        this.dispose();
        
    }//GEN-LAST:event_restoreBtnActionPerformed

    private void locationInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationInputActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println(this.filePath);
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public void setInput(String title, String content, int archiveStatus, String tag, String location, String category, int r, int g, int b, String filePath, String fileType) {
        titleInput.setText(title);
        contentInput.setText(content);
        tagInput.setText(tag);
        categoryField.setText(category);      
//        this.attachmentField.setText(filePath);
        
//        if attachment is image format, show it on panel
        if ("jpg".equals(fileType) || "jpeg".equals(fileType) || "png".equals(fileType)) {            
            ImageIcon icon = new ImageIcon(filePath);                 
            photoPanel.setIcon(icon);   
        }        
        
        if (category != "None") {
         categoryColour.setBackground(new Color(r, g, b));   
        }                
                
        if (archiveStatus == 1) {
            this.archiveStatus.setText("Archived");
            this.unArchiveBtn.setEnabled(true);
            this.archiveBtn.setEnabled(false);

        }else{
            this.archiveStatus.setText("Not Archived");
            this.unArchiveBtn.setEnabled(false);
        }
    }
    
    public void setReminder(String dateTime, String repeat) {
        System.out.println("in set reminder");
        this.dateTime = dateTime;
        this.repeat = repeat;
        this.reminderField.setText("Reminder: " + dateTime + ", repeat: " + repeat);
    }
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoteFormEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoteFormEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoteFormEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoteFormEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NoteFormEditorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton archiveBtn;
    private javax.swing.JTextField archiveStatus;
    private javax.swing.JButton attachmentBtn;
    private javax.swing.JTextField attachmentField;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton categoryBtn;
    private javax.swing.JPanel categoryColour;
    private javax.swing.JTextField categoryField;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JTextArea contentInput;
    private javax.swing.JLabel contentLabel;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton locationBtn;
    private javax.swing.JDialog locationDialog;
    private javax.swing.JTextField locationField;
    private javax.swing.JTextField locationInput;
    private javax.swing.JComboBox<String> locationSelect;
    private javax.swing.JLabel photoPanel;
    private javax.swing.JButton reminderBtn;
    private javax.swing.JTextField reminderField;
    private javax.swing.JButton restoreBtn;
    private javax.swing.JButton searchLocationBtn;
    private javax.swing.JTextPane tagInput;
    private javax.swing.JTextPane titleInput;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel titleLabel1;
    private javax.swing.JButton trashBtn;
    private javax.swing.JButton unArchiveBtn;
    // End of variables declaration//GEN-END:variables


}

class LocationRenderer extends BasicComboBoxRenderer {
  @Override
  public Component getListCellRendererComponent(JList list, Object value,
      int index, boolean isSelected, boolean cellHasFocus) {
    super.getListCellRendererComponent(list, value, index, isSelected,
        cellHasFocus);
    if (value != null) {
      Location location = (Location) value;
      setText(location.getInfo().toUpperCase());
    }
    return this;
  }
}





