/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package omninotes;
import static javax.swing.JOptionPane.showMessageDialog;

/**
 *
 * @author adis
 */
public class NoteFormEditorUI extends javax.swing.JFrame {

    /**
     * Creates new form NoteFormEditorUI
     */
    public NoteFormEditorUI() {
        initComponents();        
    }
    // flag to determine whether a note is selected or not. default -1, not selected    
    private int noteId = -1;

    public int getNoteId() {
        return noteId;
    }

    public void setNoteId(int noteId) {
        this.noteId = noteId;
    }
    
    
    //to know wheter to update or create new note
    private String mode = null;

    public String getMode() {
        return mode;
    }

    public void setMode(String mode) {
        this.mode = mode;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        contentInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        titleInput = new javax.swing.JTextPane();
        titleLabel = new javax.swing.JLabel();
        contentLabel = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        categoryBtn = new javax.swing.JButton();
        attachmentBtn = new javax.swing.JButton();
        reminderBtn = new javax.swing.JButton();
        archiveStatus = new javax.swing.JTextField();
        archiveBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        contentInput.setColumns(20);
        contentInput.setRows(5);
        jScrollPane1.setViewportView(contentInput);

        jScrollPane2.setViewportView(titleInput);

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        titleLabel.setText("Title");

        contentLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        contentLabel.setText("Content");

        backBtn.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        backBtn.setText("Back");
        backBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBtnMouseClicked(evt);
            }
        });
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        categoryBtn.setText("Category");
        categoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryBtnActionPerformed(evt);
            }
        });

        attachmentBtn.setText("Attachment");
        attachmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachmentBtnActionPerformed(evt);
            }
        });

        reminderBtn.setText("Reminder");
        reminderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reminderBtnActionPerformed(evt);
            }
        });

        archiveStatus.setText("Not Archived");
        archiveStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        archiveStatus.setEnabled(false);

        archiveBtn.setText("Archive");
        archiveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                archiveBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(contentLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(archiveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(attachmentBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(categoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(reminderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane2))
                            .addComponent(archiveStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(260, 260, 260))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(titleLabel)
                    .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(contentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addComponent(archiveStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(archiveBtn)
                    .addComponent(attachmentBtn)
                    .addComponent(categoryBtn)
                    .addComponent(reminderBtn))
                .addGap(263, 263, 263))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
           
        
    }//GEN-LAST:event_backBtnActionPerformed
//save current note
    private void backBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnMouseClicked
        NoteEditor ne = new NoteEditor();                
        ne.instantiateNote(titleInput.getText(), contentInput.getText(), this.mode, this.noteId);   //save current typed note       
        NoteControl nc = new NoteControl();
        nc.openMainMenu();      //open mainmenu, show active notes
        this.dispose();         //destroy this object
    }//GEN-LAST:event_backBtnMouseClicked
    //archive a note
    private void archiveBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_archiveBtnMouseClicked
        //there has to be content before archiving a note!
        if (this.noteId == -1 && "".equals(this.titleInput.getText().trim()) && "".equals(this.contentInput.getText().trim()) ) {
            showMessageDialog(null, "Please fill in the note!");
            return;
        }        

        NoteEditor ne = new NoteEditor();       //instantiate noteeditor (controller)
        NoteControl nc = new NoteControl();
        ne.archiveNote(this.noteId);            //call function to archive
        nc.openMainMenu();                      //back to mainmenu                
        this.dispose();                         //destroy noteformeditor
        
        
    }//GEN-LAST:event_archiveBtnMouseClicked

    private void attachmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachmentBtnActionPerformed
        
        System.out.println("Clicked on attachment!");
    }//GEN-LAST:event_attachmentBtnActionPerformed

    private void categoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryBtnActionPerformed
        System.out.println("Clicked on category!");
    }//GEN-LAST:event_categoryBtnActionPerformed

    private void reminderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reminderBtnActionPerformed
        System.out.println("Clicked on reminder!");
    }//GEN-LAST:event_reminderBtnActionPerformed

    
    public void setInput(String title, String content, int archiveStatus){
        titleInput.setText(title);
        contentInput.setText(content);
        if (archiveStatus == 1) {
            this.archiveStatus.setText("Archived");
        }else{
            this.archiveStatus.setText("Not Archived");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoteFormEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoteFormEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoteFormEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoteFormEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NoteFormEditorUI().setVisible(true);
            }
        });
    }
//    
//    NoteEditor ne = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton archiveBtn;
    private javax.swing.JTextField archiveStatus;
    private javax.swing.JButton attachmentBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton categoryBtn;
    private javax.swing.JTextArea contentInput;
    private javax.swing.JLabel contentLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton reminderBtn;
    private javax.swing.JTextPane titleInput;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
