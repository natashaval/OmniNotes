package View;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.sql.ResultSet;
import java.util.ArrayList;
import omninotes.Model.Note;
import omninotes.Controller.NoteControl;
import omninotes.Controller.NoteEditor;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.concurrent.CompletableFuture;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
/**
 *
 * @author Natasha
 */
public class MainMenuUI extends javax.swing.JFrame {

    /**
     * Creates new form MainMenuUI
     */
    public MainMenuUI() {
        initComponents();
        this.getNotes();
        this.fillJTree();
            
    }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField6 = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        myNotesTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        archiveMenu = new javax.swing.JMenuItem();
        trashMenu = new javax.swing.JMenuItem();

        jFormattedTextField6.setText("activeNote5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Add Note");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(categoryTree);

        myNotesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id", "Title", "content", "is_archive"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        myNotesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                myNotesTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(myNotesTable);

        jMenu1.setText("Menu");

        archiveMenu.setText("Archive");
        archiveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archiveMenuActionPerformed(evt);
            }
        });
        jMenu1.add(archiveMenu);

        trashMenu.setText("Trash");
        trashMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trashMenuActionPerformed(evt);
            }
        });
        jMenu1.add(trashMenu);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(227, 227, 227))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        NoteEditor ne = new NoteEditor(this);
        this.dispose();
        ne.openNoteEditorUI("create");
    }//GEN-LAST:event_jButton1ActionPerformed

        //on click active notes
    private void myNotesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myNotesTableMouseClicked
        try{
            int noteId = Integer.parseInt(myNotesTable.getModel().getValueAt(myNotesTable.getSelectedRow(), 0).toString());
            String title = myNotesTable.getModel().getValueAt(myNotesTable.getSelectedRow(), 1).toString();        
            String content = myNotesTable.getModel().getValueAt(myNotesTable.getSelectedRow(), 2).toString();
            int isActive = Integer.parseInt(myNotesTable.getModel().getValueAt(myNotesTable.getSelectedRow(), 3).toString());
            Note note = new Note();
            note.setTitle(title);
            note.setContent(content);
            note.setNoteId(noteId);
            System.out.println(noteId);

            NoteEditor ne = new NoteEditor();
            ne.openNoteEditorUI(note, "update");
        }catch(Exception e){
            System.out.println("No notes");   
            return;
        }        
        this.dispose();
    }//GEN-LAST:event_myNotesTableMouseClicked

    private void archiveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archiveMenuActionPerformed
        NoteControl nc = new NoteControl();
        nc.openArchiveUI();           
        this.dispose();

    }//GEN-LAST:event_archiveMenuActionPerformed

    private void trashMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trashMenuActionPerformed
        NoteControl nc = new NoteControl();
        nc.openTrashUI();
        this.dispose();
    }//GEN-LAST:event_trashMenuActionPerformed
    
//    public CompletableFuture<Void> getNotes() throws InterruptedException{
    public void getNotes(){
        NoteControl nc = new NoteControl();
        LinkedList<Note> myNotes = new LinkedList<Note>();
        myNotes = nc.getNotes();        

        Iterator<Note> itr=myNotes.iterator();  
        if (myNotes.size() > 0)  {            
            ((DefaultTableModel)myNotesTable.getModel()).setRowCount(0);    //clear table

            TableColumnModel tcm = myNotesTable.getColumnModel();
            tcm.removeColumn( tcm.getColumn(0) ); //hide id column
            tcm.removeColumn( tcm.getColumn(1) ); //hide content column
            tcm.removeColumn( tcm.getColumn(1) ); //hide is_active column


            DefaultTableModel model = (DefaultTableModel) myNotesTable.getModel();
            //add data to notes table
            while(itr.hasNext()){                        
                Note current = itr.next();
                int id = current.getNoteId();
                String title = current.getTitle();
                String content = current.getContent();
                int isArchive = current.getIsArchived();
                
                Object[] row = { id, title, content, isArchive };
                model.addRow(row);
            }
//            this.j
        }                     
    }
    
//        @SuppressWarnings("CallToThreadDumpStack")
//    public final void pop_tree() {
//        try {
// 
//            try {
//                con = Database.getConnection();
//                stm = con.createStatement();
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
//            ArrayList list = new ArrayList();
//            list.add("Category List");
//            String sql = "SELECT * from category";
// 
//            ResultSet rs = stm.executeQuery(sql);
// 
//            while (rs.next()) {
//                Object value[] = {rs.getString(1), rs.getString(2)};
//                list.add(value);
//            }
//            Object hierarchy[] = list.toArray();
//            DefaultMutableTreeNode root = processHierarchy(hierarchy);
// 
//            DefaultTreeModel treeModel = new DefaultTreeModel(root);
//            cat_tree.setModel(treeModel);
//        } catch (Exception e) {
//        }
// 
//    }
//    
//       @SuppressWarnings("CallToThreadDumpStack")
//    public DefaultMutableTreeNode processHierarchy(Object[] hierarchy) {
//        DefaultMutableTreeNode node = new DefaultMutableTreeNode(hierarchy[0]);
//        try {
//            int ctrow = 0;
//            int i = 0;
//            try {
// 
//                try {
//                    con = Database.getConnection();
//                    stm = con.createStatement();
//                } catch (Exception ex) {
//                    ex.printStackTrace();
//                }
//                String sql = "SELECT catid, catname from category";
//                ResultSet rs = stm.executeQuery(sql);
// 
//                while (rs.next()) {
//                    ctrow = rs.getRow();
//                }
//                String L1Nam[] = new String[ctrow];
//                String L1Id[] = new String[ctrow];
//                ResultSet rs1 = stm.executeQuery(sql);
//                while (rs1.next()) {
//                    L1Nam[i] = rs1.getString("catname");
//                    L1Id[i] = rs1.getString("catid");
//                    i++;
//                }
//                DefaultMutableTreeNode child, grandchild;
//                for (int childIndex = 0; childIndex < L1Nam.length; childIndex++) {
//                    child = new DefaultMutableTreeNode(L1Nam[childIndex]);
//                    node.add(child);//add each created child to root
//                    String sql2 = "SELECT scatname from subcategory where catid= '" + L1Id[childIndex] + "' ";
//                    ResultSet rs3 = stm.executeQuery(sql2);
//                    while (rs3.next()) {
//                        grandchild = new DefaultMutableTreeNode(rs3.getString("scatname"));
//                        child.add(grandchild);//add each grandchild to each child
//                    }
//                }
// 
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
// 
//        } catch (Exception e) {
//        }
// 
//        return (node);
//    }
    
    public void fillJTree(){
        DefaultMutableTreeNode cats = new DefaultMutableTreeNode("categories");
        DefaultMutableTreeNode cats1 = new DefaultMutableTreeNode("categories1");
        DefaultMutableTreeNode cats1_1 = new DefaultMutableTreeNode("categories 1.1");
        cats1.add(cats1_1);
        cats.add(cats1);
        
        DefaultTreeModel dtm = new DefaultTreeModel(cats);
        this.categoryTree.setModel(dtm);
                
    
    
    }
 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenuUI().setVisible(true);
            }
        });
    }

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem archiveMenu;
    private javax.swing.JTree categoryTree;
    private javax.swing.JButton jButton1;
    private javax.swing.JFormattedTextField jFormattedTextField6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable myNotesTable;
    private javax.swing.JMenuItem trashMenu;
    // End of variables declaration//GEN-END:variables

}
                
